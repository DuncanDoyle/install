---

# label namespace
- name: "label {{ namespace }} namespace"
  oc_label:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: namespace
    name: "{{ namespace }}"
    labels:
      - key: integreatly-middleware-service
        value: "true"
      - key: monitoring-key
        value: middleware

- name: "create operator rbac"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    kind: role
    name: keycloak-operator
    files:
      - "{{ rhsso_operator_resources }}/rbac.yaml"

- name: "create keycloak crd"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: crd
    name: keycloaks.aerogear.org
    files:
      - "{{ rhsso_operator_resources }}/crds/Keycloak_crd.yaml"

- name: "create keycloak realm crd"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: crd
    name: keycloakrealms.aerogear.org
    files:
      - "{{ rhsso_operator_resources }}/crds/KeycloakRealm_crd.yaml"

- name: "deploy keycloak operator"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: deployment
    name: keycloak-operator
    namespace: "{{ namespace }}"
    files:
      - "{{ rhsso_operator_resources }}/operator.yaml"

- name: "wait until operator is deployed"
  shell: "{{ openshift_cli }} get deployment keycloak-operator -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 30
  delay: 10
  changed_when: false

- name: "copy keycloak custom resource template"
  template:
    src: "{{ resources_dir }}/{{ rhsso_resource_template }}"
    dest: "{{ work_dir }}/{{ rhsso_resource_template }}"

- name: "create keycloak custom resource"
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    kind: Keycloak
    name: rhsso
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ rhsso_resource_template }}"   

- name: "wait until sso-postgresql deployment config is created"
  shell: oc get dc sso-postgresql -n {{ namespace }}
  register: result
  until: result.stdout
  retries: 50
  delay: 1
  failed_when: not result.stdout
  changed_when: False

- name: "patch sso-postgresql dc to use postgresql 9.6"
  shell: oc patch dc sso-postgresql -p '{"spec":{"triggers":[{"type":"ImageChange", "imageChangeParams":{"automatic":true,"containerNames":["sso-postgresql"],"from":{"kind":"ImageStreamTag","namespace":"openshift","name":"postgresql:9.6"}}}]}}' -n {{ namespace }}  